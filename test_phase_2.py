"""
Phase 2 Testing Script
Tests bot selection interface, process management, and monitoring components
"""

from Views.globals.app_logger import app_logger
from services.supabase_auth_service import get_auth_service
from services.process_manager import get_process_manager
import asyncio
import sys
import os
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))


async def test_process_manager():
    """Test process manager functionality"""
    print("\nüîß Testing Process Manager...")

    try:
        # Get process manager instance
        process_manager = await get_process_manager()

        # Test process manager initialization
        if process_manager:
            print("‚úÖ Process Manager initialized successfully")

            # Test getting active sessions (should be empty initially)
            active_sessions = await process_manager.get_active_sessions()
            print(f"‚úÖ Active sessions count: {len(active_sessions)}")

            return True
        else:
            print("‚ùå Failed to initialize Process Manager")
            return False

    except Exception as e:
        print(f"‚ùå Process Manager test failed: {e}")
        return False


async def test_auth_service():
    """Test auth service trading session functionality"""
    print("\nüîê Testing Auth Service Trading Session Support...")

    try:
        # Get auth service instance
        auth_service = await get_auth_service()

        if auth_service:
            print("‚úÖ Auth Service initialized successfully")

            # Test trading session creation (mock data)
            session_id = await auth_service.create_trading_session(
                user_id="test_user",
                account_id="test_account",
                bot_config={
                    "strategy": "CycleTrader",
                    "config": {"lot_sizes": "0.01", "take_profit": 5}
                }
            )

            if session_id:
                print(f"‚úÖ Trading session created: {session_id[:8]}...")

                # Test status update
                success = await auth_service.update_trading_session_status(session_id, "running")
                if success:
                    print("‚úÖ Session status updated successfully")
                else:
                    print("‚ö†Ô∏è Session status update failed")

                return True
            else:
                print("‚ö†Ô∏è Trading session creation returned None (expected for mock)")
                return True
        else:
            print("‚ùå Failed to initialize Auth Service")
            return False

    except Exception as e:
        print(f"‚ùå Auth Service test failed: {e}")
        return False


def test_view_imports():
    """Test that all new Phase 2 views can be imported"""
    print("\nüì± Testing Phase 2 View Imports...")

    try:
        # Test bot selection page import
        from Views.bots.bot_selection_page import BotSelectionPageView
        print("‚úÖ BotSelectionPageView imported successfully")

        # Test system monitor page import
        from Views.monitor.system_monitor_page import SystemMonitorPageView
        print("‚úÖ SystemMonitorPageView imported successfully")

        # Test strategy availability
        bot_view = BotSelectionPageView(None, None, {})
        strategies = bot_view.get_available_strategies()

        print(f"‚úÖ Available strategies: {list(strategies.keys())}")

        # Verify strategy configurations
        for strategy_name, strategy_info in strategies.items():
            config_fields = len(strategy_info.get('config_fields', []))
            print(f"  - {strategy_name}: {config_fields} configuration fields")

        return True

    except Exception as e:
        print(f"‚ùå View import test failed: {e}")
        return False


def test_routing_configuration():
    """Test routing configuration for Phase 2"""
    print("\nüõ£Ô∏è Testing Routing Configuration...")

    try:
        from Views.globals.app_router import AppRoutes

        # Check that new routes exist
        if hasattr(AppRoutes, 'BOT_SELECTION'):
            print(f"‚úÖ BOT_SELECTION route: {AppRoutes.BOT_SELECTION}")
        else:
            print("‚ùå BOT_SELECTION route not found")
            return False

        if hasattr(AppRoutes, 'SYSTEM_MONITOR'):
            print(f"‚úÖ SYSTEM_MONITOR route: {AppRoutes.SYSTEM_MONITOR}")
        else:
            print("‚ùå SYSTEM_MONITOR route not found")
            return False

        return True

    except Exception as e:
        print(f"‚ùå Routing test failed: {e}")
        return False


def test_dependencies():
    """Test that all required dependencies are available"""
    print("\nüì¶ Testing Dependencies...")

    try:
        import flet
        print("‚úÖ Flet available")

        import psutil
        print("‚úÖ psutil available")

        import asyncio
        print("‚úÖ asyncio available")

        import subprocess
        print("‚úÖ subprocess available")

        from fletx import Xview
        print("‚úÖ fletx.Xview available")

        return True

    except ImportError as e:
        print(f"‚ùå Dependency test failed: {e}")
        return False


async def run_comprehensive_test():
    """Run comprehensive Phase 2 testing"""
    print("üöÄ Starting Phase 2 Comprehensive Testing...")
    print("=" * 60)

    results = []

    # Test 1: Dependencies
    results.append(test_dependencies())

    # Test 2: View imports
    results.append(test_view_imports())

    # Test 3: Routing configuration
    results.append(test_routing_configuration())

    # Test 4: Auth service
    results.append(await test_auth_service())

    # Test 5: Process manager
    results.append(await test_process_manager())

    # Summary
    print("\n" + "=" * 60)
    print("üìä TEST SUMMARY")
    print("=" * 60)

    passed = sum(results)
    total = len(results)

    test_names = [
        "Dependencies",
        "View Imports",
        "Routing Configuration",
        "Auth Service",
        "Process Manager"
    ]

    for i, (test_name, result) in enumerate(zip(test_names, results)):
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{i+1}. {test_name:<25} {status}")

    print(f"\nOverall: {passed}/{total} tests passed")

    if passed == total:
        print("\nüéâ ALL TESTS PASSED - Phase 2 Implementation Ready!")
        print("\nüîÑ User Flow Available:")
        print("   1. Login ‚Üí Account Selection")
        print("   2. Bot Selection ‚Üí Strategy Configuration")
        print("   3. Launch Trading System ‚Üí System Monitor")
        print("   4. Real-time Monitoring ‚Üí Process Management")
    else:
        print(
            f"\n‚ö†Ô∏è {total - passed} tests failed - Please review implementation")

    return passed == total


if __name__ == "__main__":
    # Set up logging
    import logging
    logging.basicConfig(level=logging.INFO)

    # Run tests
    success = asyncio.run(run_comprehensive_test())

    if success:
        print("\n‚ú® Phase 2 testing completed successfully!")
        sys.exit(0)
    else:
        print("\nüí• Phase 2 testing completed with failures!")
        sys.exit(1)
